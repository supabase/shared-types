export enum ServiceNames {
  AdminApi = 'adminapi',
  ApiGateway = 'api-gateway',
  Functions = 'functions',
  Gotrue = 'gotrue',
  Kong = 'kong',
  Pgbouncer = 'pgbouncer',
  Pgsodium = 'pgsodium',
  Postgresql = 'postgresql',
  Postgrest = 'postgrest',
  Realtime = 'realtime',
  Storage = 'storage',
  Walg = 'walg',
  AutoShutdown = 'autoshutdown',
}

export const DEFAULT_REALTIME_SLOT_NAME_WITH_WALRUS = 'realtime_rls'

export enum PermissionAction {
  ANALYTICS_READ = 'analytics:Read',
  AUTH_EXECUTE = 'auth:Execute',
  BILLING_READ = 'billing:Read',
  BILLING_WRITE = 'billing:Write',
  CREATE = 'write:Create',
  DELETE = 'write:Delete',
  FUNCTIONS_READ = 'functions:Read',
  FUNCTIONS_WRITE = 'functions:Write',
  INFRA_EXECUTE = 'infra:Execute',
  READ = 'read:Read',
  SQL_SELECT = 'sql:Read:Select',
  SQL_DELETE = 'sql:Write:Delete',
  SQL_INSERT = 'sql:Write:Insert',
  SQL_UPDATE = 'sql:Write:Update',
  STORAGE_ADMIN_READ = 'storage:Admin:Read',
  STORAGE_ADMIN_WRITE = 'storage:Admin:Write',
  TENANT_SQL_ADMIN_READ = 'tenant:Sql:Admin:Read',
  TENANT_SQL_ADMIN_WRITE = 'tenant:Sql:Admin:Write',
  TENANT_SQL_CREATE_TABLE = 'tenant:Sql:CreateTable',
  TENANT_SQL_DELETE = 'tenant:Sql:Write:Delete',
  TENANT_SQL_INSERT = 'tenant:Sql:Write:Insert',
  TENANT_SQL_QUERY = 'tenant:Sql:Query',
  TENANT_SQL_SELECT = 'tenant:Sql:Read:Select',
  TENANT_SQL_UPDATE = 'tenant:Sql:Write:Update',
  UPDATE = 'write:Update',
}

export enum OAuthScope {
  WRITE_BACKUPS = 'write:backups',
  READ_CUSTOM_DOMAINS = 'read:custom_domains',
  WRITE_CUSTOM_DOMAINS = 'write:custom_domains',
  READ_DATABASE_BRANCHES = 'read:database_branches',
  WRITE_DATABASE_BRANCHES = 'write:database_branches',
  READ_READONLY_MODE_STATUS = 'read:readonly_mode_status',
  WRITE_READONLY_MODE_STATUS = 'write:readonly_mode_status',
  READ_PROJECT_UPGRADE = 'read:project_upgrade',
  WRITE_PROJECT_UPGRADE = 'write:project_upgrade',
  READ_EDGE_FUNCTIONS = 'read:edge_functions',
  WRITE_EDGE_FUNCTIONS = 'write:edge_functions',
  WRITE_NETWORK_BANS = 'write:network_bans',
  READ_NETWORK_RESTRICTIONS = 'read:network_restrictions',
  WRITE_NETWORK_RESTRICTIONS = 'write:network_restrictions',
  READ_ORGANIZATIONS = 'read:organizations',
  WRITE_ORGANIZATIONS = 'write:organizations',
  READ_PGSODIUM = 'read:pgsodium',
  WRITE_PGSODIUM = 'write:pgsodium',
  READ_PROJECTS = 'read:projects',
  WRITE_PROJECTS = 'write:projects',
  READ_PROJECT_API_KEYS = 'read:project_api_keys',
  READ_PROJECT_TS_TYPES = 'read:project_ts_types',
  WRITE_DATABASE_QUERY = 'write:database_query',
  WRITE_DATABASE_WEBHOOKS = 'write:database_webhooks',
  READ_AUTH_CONFIG = 'read:auth_config',
  WRITE_AUTH_CONFIG = 'write:auth_config',
  READ_PGBOUNCER_CONFIG = 'read:pgbouncer_config',
  READ_POSTGRES_CONFIG = 'read:postgres_config',
  WRITE_POSTGRES_CONFIG = 'write:postgres_config',
  READ_SECRETS = 'read:secrets',
  WRITE_SECRETS = 'write:secrets',
  READ_POSTGREST_CONFIG = 'read:postgrest_config',
  WRITE_POSTGREST_CONFIG = 'write:postgrest_config',
  READ_SQL_SNIPPETS = 'read:sql_snippets',
  READ_SSL_ENFORCEMENT = 'read:ssl_enforcement',
  WRITE_SSL_ENFORCEMENT = 'write:ssl_enforcement',
  READ_AUTH_SSO_PROVIDERS = 'read:auth_sso_providers',
  WRITE_AUTH_SSO_PROVIDERS = 'write:auth_sso_providers',
  READ_VANITY_SUBDOMAINS = 'read:vanity_subdomains',
  WRITE_VANITY_SUBDOMAINS = 'write:vanity_subdomains',
}

export enum SupportCategories {
  PROBLEM = 'Problem',
  DASHBOARD_BUG = 'Dashboard_bug',
  DATABASE_UNRESPONSIVE = 'Database_unresponsive',
  PERFORMANCE_ISSUES = 'Performance',
  SALES_ENQUIRY = 'Sales',
  BILLING = 'Billing',
  REFUND = 'Refund',
  ABUSE = 'Abuse',
  LOGIN_ISSUES = 'Login_issues',
  ACCOUNT_DELETION = 'Account_deletion',
}
